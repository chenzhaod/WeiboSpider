name: Dropbox Token Refresh Check

on:
  workflow_dispatch:  # Allows you to manually trigger the workflow from the GitHub UI

jobs:
  token_check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check and Possibly Refresh Dropbox Token
      run: |
        echo "Checking token validity..."
        
        TOKEN_VALIDITY=$(curl -X POST https://api.dropboxapi.com/2/users/get_current_account \
          --header "Authorization: Bearer ${{ secrets.DROPBOX_TOKEN }}" \
          --write-out "%{http_code}" --silent --output /dev/null)
          
        if [ "$TOKEN_VALIDITY" -ne 200 ]; then
            echo "Token is invalid or expired. Refreshing..."
            TOKEN_RESPONSE=$(curl -X POST https://api.dropboxapi.com/oauth2/token \
              -d grant_type=refresh_token \
              -d refresh_token=${{ secrets.DROPBOX_REFRESH_TOKEN }} \
              -u ${{ secrets.DROPBOX_APP_KEY }}:${{ secrets.DROPBOX_APP_SECRET }})
              
            ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
            # You can print the first few characters of the ACCESS_TOKEN to verify it's different/new.
            echo "New token starts with: ${ACCESS_TOKEN:0:5}..."
            
            # If Dropbox provides a new refresh token, you might want to capture and store it, but be cautious about printing it.
            # NEW_REFRESH_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.refresh_token')
        else
            echo "Token is still valid!"
        fi
